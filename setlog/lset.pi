%% module lset
%
% @desc This module provides a representation for lsets used in solver and offers
%       some utilities methods for lsets management.
%
% @author Luca Parolari <luca.parolari23@gmail.com>
% @version 0.1.0

module lset.

import log_h.

new_lset(ListRest) = Lset => 
    Lset = ListRest.
new_lset(Head, Rest) = Lset => 
    to_lset_list(Head, Rest, List),
    Lset = List.

private
to_lset_list([], Rest, List) => 
    List = Rest.
to_lset_list([E|Es], Rest, List) => 
    L = E,
    to_lset_list(Es, Rest, Ls),
    List = [L|Ls].


%% lset_rest(lset(X)) = R
%
% @param lset(X)  The lset from which take the rest.
% @return  The rest (with setlog meaning) R from lset(X).

lset_rest(X) = R => lset_rest(X, R).

private
lset_rest([], R) => R = [].
lset_rest([X|Xs], R) => lset_rest(Xs, R).
lset_rest(X, R) => R = X.


%% lset_head(lset(X)) = R
%
% @param lset(X)  The lset from which take the head.
% @return  The head (with setlog meaning) R from lset(X).

lset_head(X) = R => lset_head(X, R).

private
lset_head([], R) => R = [].
lset_head([X|Xs], R) => lset_head(Xs, RR), R = [X] ++ RR.
lset_head(X, R) => R = [].


%% is_lset(S)
%
% @desc This predicate is true if S is an lset, false otherwise.

is_lset(S) => list(S).


%% is_lset(S)
%
% @desc This predicate is true if S is an lset, false otherwise.

is_emptyset([]) => true.
