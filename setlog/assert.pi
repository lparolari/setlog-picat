module assert.

%% module assert
%
% @author Luca Parolari <luca.parolari23@gmail.com>
% @desc This module aims to help you with unit testing, providing testing methods.
%  This module provides two main utilities.
%   - $test, used for a global overview for tests;
%   - $assert, used to implement unit testing of your functions/predicates.


import log_h.


%% ****************** $test *********************

%% new_assert(Name) = A
% @desc Build  A new test object.
% @constructor
new_test() = T => T = $test(NumberOfTests, NumberOfSuccess, NumberOfFailed).



%% ***************** $assert ********************

%% new_assert(Name) = A
%
% @desc Build  A new assertion with name Name
% @param Name:atom  A name of this assertion.
% @constructor

new_assert(Name) = A => A = $assert(Name).


%% aname(A) = Name
%
% @param A:struct The assertion object.
% @reutrn The name of the assertion object.

aname(A) = Name => Name = A[1].


%% assert_equal(A, Expected, Actual)
%
% @param A:struct  The assertion object.
% @param Expected:atom  The expected value.
% @param Actual:atom    The actual value.
%
% @desc Log a success if Expected is identical to Actual, log a fail otherwise.

assert_equal(A, Expected, Actual), Expected == Actual => 
    log_i("SUCCESS " ++ A.aname().to_string() ++ " - assert_equal(ex:" ++ Expected.to_string ++ ", ac:" ++ Actual.to_string ++ ")").
assert_equal(A, Expected, Actual) => 
    log_e("FAILED "  ++ A.aname().to_string() ++ " - assert_equal(ex:" ++ Expected.to_string ++ ", ac:" ++ Actual.to_string ++ ")").


% deprecated
assert_fail_failed(A) => log_e("FAILED " ++ A.aname().to_string() ++ " - assert_fail").


%% assert_fail(A)
%
% @param A:struct  The assertion object.
% @desc Log a success if reached.

assert_fail(A) => log_i("SUCCESS " ++ A.aname().to_string() ++ " - assert_fail").


%% fail(A)
%
% @param A:struct  The assertion object.
% @desc Log a failure if reached.

fail(A) => log_e("FAILED " ++ A.aname().to_string()).


%% success(A)
%
% @param A:struct  The assertion object.
% @desc Log a success if reached.

success(A) => log_i("SUCCESS " ++ A.aname().to_string()).