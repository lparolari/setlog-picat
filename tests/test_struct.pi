import struct_h.

main =>
    test_struct_with_new,
    test_struct_with_dollar,
    test_struct_arity,
    test_struct_list_conversion,
    test_struct_functions.

% creates a struct with new keyword and access first and second elements.
test_struct_with_new =>
    println("****** test_struct_new"),
    X = new_struct(neq, [a,b]),
    X1 = X[1],
    X2 = X[2],
    println(X),
    println(X1),
    println(X2).

% creates a struct with $ idiom and access first and second elements.
test_struct_with_dollar =>
    println("****** test_struct_with_dollar"),
    X = $neq(a,b),
    X1 = X[1],
    X2 = X[2],
    println(X),
    println(X1),
    println(X2).

% creates a struct and prints it's length.
test_struct_arity =>
    println("****** test_struct_arity"),
    X = $neq(a,b),
    println(X.arity),
    println(X.length).

% struct to_list test usage.
test_struct_list_conversion =>
    println("****** test_struct_list_conversion"),
    X = $neq(a,b),
    L = X.to_list,
    println(L).

% struct functions test usage.
test_struct_functions =>
    println("****** test_struct_functions"),
    X = $neq(a,b),  % a struct.
    Y = 1,          % a non-struct.
    A1 = name(X), A1.println,
    % is_struct is imoorted form struct_h module and converts
    %  the built-in struct predicate in a function.
    A2 = is_struct(X), A2.println,
    B2 = is_struct(Y), B2.println.
