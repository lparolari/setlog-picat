import solver.
import assert.
import log_h.

main =>
    all().

all => 
    log_mode(none),
    equality_tests(),
    inequality_tests(),
    membership_tests().

equality_tests() =>
    println("*** EQUALITY TESTS ***"),
    setlog_eq1_1_test, setlog_eq1_2_test,
    setlog_eq2_1_test, 
    setlog_eq3_1_test, setlog_eq3_2_test, 
    setlog_eq4_1_test, 
    setlog_eq5_1_test, setlog_eq5_2_test, 
    setlog_eq6_1_test, 
    % 7
    setlog_eq8_1_test, 
    nl, nl.

inequality_tests() =>
    println("*** INEQUALITY TESTS ***"),
    setlog_neq1_1_test,
    nl, nl.

membership_tests() =>
    println("*** MEMBERSHIP TESTS ***"),
    setlog_insl_1_test,
    setlog_in1_1_test,
    setlog_in2_1_test, setlog_in2_2_test,
    setlog_in3_1_test,
    nl, nl.



% *********************************************************
%    eq
% *********************************************************

% ---------------------------------------------------------
% *** eq1

setlog_eq1_1_test =>
    A = new_assert("setlog_eq1_1_test"),
    F = [$eq(1, 1)],
    solve(F, FF),
    A.assert_equal([], FF).

setlog_eq1_2_test ?=>
    A = new_assert("setlog_eq1_2_test"),
    F = [$eq(1, 2)],
    solve(F, FF),
    A.assert_fail_failed().
setlog_eq1_2_test =>
    A = new_assert("setlog_eq1_2_test"), 
    A.assert_fail().


% ---------------------------------------------------------
% *** eq2

setlog_eq2_1_test =>
    A = new_assert("setlog_eq2_1_test"),
    F = [$eq(1, X)],
    solve(F, FF),
    A.assert_equal([], FF).


% ---------------------------------------------------------
% *** eq3

setlog_eq3_1_test =>
    A = new_assert("setlog_eq3_1_test"),
    F = [ $eq(X, [1,2,X]) ],
    solve(F, FF),
    A.assert_equal([], FF).

setlog_eq3_2_test ?=>
    A = new_assert("setlog_eq3_2_test"),
    F = [$eq(X, [1,2, X])],
    solve(F, FF),
    fail,
    A.assert_fail_failed().
setlog_eq3_2_test => 
    A = new_assert("setlog_eq3_2_test"),
    A.assert_fail().


% ---------------------------------------------------------
% *** eq4

setlog_eq4_1_test ?=>
    A = new_assert("setlog_eq4_1_test"),
    F = [$eq(X, [X])],
    solve(F, FF),
    A.assert_fail_failed().
setlog_eq4_1_test => 
    A = new_assert("setlog_eq4_1_test"),
    A.assert_fail().


% ---------------------------------------------------------
% *** eq5

setlog_eq5_1_test =>
    A = new_assert("setlog_eq5_1_test"),
    F = [$eq(X, 1)],
    solve(F, FF),
    A.assert_equal([], FF).

setlog_eq5_2_test =>
    A = new_assert("setlog_eq5_2_test"),
    F = [$eq(X, Y)],
    solve(F, FF),
    A.assert_equal([], FF).


% ---------------------------------------------------------
% *** eq6

setlog_eq6_1_test ?=>
        A = new_assert("setlog_eq6_1_test"),
        F = [$eq($f(1), $g(1))],
        solve(F, FF),
        A.assert_fail_failed().
setlog_eq6_1_test => A = new_assert("setlog_eq6_1_test"), A.assert_fail().


% ---------------------------------------------------------
% *** eq8

setlog_eq8_1_test =>
    A = new_assert("setlog_eq8_1_test"),
    F = [$eq( [b,X], [a,Y] )],
    solve(F, FF),
    A.assert_equal([], FF).
setlog_eq8_1_test ?=> A = new_assert("setlog_eq8_1_test"), A.fail().

setlog_eq8_2_test ?=>
        A = new_assert("setlog_eq8_2_test"),
        F = [$eq( lset([b,c],X), lset([a,c],Y) )],
        solve(F, FF),
        A.assert_equal([], FF).
setlog_eq8_2_test => A = new_assert("setlog_eq8_2_test"), A.fail().

setlog_eq8_3_test ?=>
        A = new_assert("setlog_eq8_3_test"),
        F = [$eq( lset([b,1],X), lset([a,2],Y) )],
        solve(F, FF),
        A.assert_equal([], FF).
setlog_eq8_3_test => A = new_assert("setlog_eq8_3_test"), A.fail().


% *********************************************************
%    neq
% *********************************************************

% ---------------------------------------------------------
% *** neq1

setlog_neq1_1_test =>
    A = new_assert("setlog_neq1_1_test"),
    F = [$neq(1, X)],
    solve(F, FF),
    A.assert_equal([$neq(X, 1)], FF).



% *********************************************************
%    membership
% *********************************************************

% ---------------------------------------------------------
% *** insl (alias)

setlog_insl_1_test ?=>
    A = new_assert("setlog_insl_1_test"),
    F = [ $insl(1, [9, 8, 7, X]) ],
    solve(F, FF),
    A.assert_equal([], FF).
setlog_insl_1_test => A = new_assert("setlog_insl_1_test"), A.fail().

% ---------------------------------------------------------
% *** in_1

setlog_in1_1_test ?=>
    A = new_assert("setlog_in1_1_test"),
    F = [ $contains([], 1) ],
    solve(F, FF),
    A.fail().
setlog_in1_1_test => A = new_assert("setlog_in1_1_test"), A.assert_fail().

% ---------------------------------------------------------
% *** in_2

setlog_in2_1_test ?=>
    A = new_assert("setlog_in2_1_test"),
    F = [ $contains([1,2,3,X], 3) ],
    solve(F, FF),
    A.assert_equal([], FF).
setlog_in2_1_test => A = new_assert("setlog_in2_1_test"), A.fail().

setlog_in2_2_test ?=>
    A = new_assert("setlog_in2_2_test"),
    F = [ $contains([1, 2, 3, X], 5) ],
    solve(F, FF),
    A.assert_equal([], FF).
setlog_in2_2_test => A = new_assert("setlog_in2_2_test"), A.fail().

% ---------------------------------------------------------
% *** in_3

setlog_in3_1_test =>
    A = new_assert("setlog_in3_1_test"),
    F = [ $contains( X, 1 ) ],
    solve(F, FF),
    A.assert_equal([], FF).
setlog_in3_1_test => A = new_assert("setlog_in3_1_test"), A.fail().