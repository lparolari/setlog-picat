%% module commands
%
% @author Luca Parolari <luca.parolari23@gmail.com>
%
% This module contains predicates and functions for the command line 
% interface that interacts with setlog solver in Picat.

module commands.

import util.
import solver2.
import global.
import log_h.
import prompt.

go => main.
main =>
    catch(
        (init, introduce, obeyCommands, halt),
        Exception,
        (fatal(Exception), main)
    ).


% fatal(+Exception) is det

fatal(Exception) =>
    nl,
    println("### FATAL ERROR OCCURRED ###"), 
    println("#"),
    println("# Exception:"),
    println("#     " ++ Exception.to_string), 
    println("#"),
    println("# Please report this issue to the project's mantainer or"),
    println("# try debuging the application with the `trace` command."), 
    println("#"),
    println("# Restarting ..."),
    nl.


%% init() is det

init => 
    set_log_mode([v,vv,vvv]),
    global(last_command_idx, 0), 
    global(last_commands, new_map()),
    global(last_args, new_map()),
    global(quiet_mode, false).


%% introduce() is det

introduce =>
    println("This is the pure implementation of {log} in Picat."),
    println("Copyright (C) 2019 Luca Parolari <luca.parolari23@gmail.com>"),
    println("  This program is free software, covered by the MIT License"),
    println("  There is ABSOLUTELY NO WARRANTY for this program."),
    println("Type 'copying' to see the conditions"),
    println("Type 'warranty' for details."),
    println("Type 'help' for advice, 'quit' to exit."),
    nl, println("Default settings follows."),
    nl, doCommand(info),
    nl, true.


%% obeyCommands() is det
% 
% @desc Realizes the cycle of interaction with the user:
%  commands are read, their legality is checked and,
%  if they are correct, they are executed.

obeyCommands() ?=>
    while(true)
        readCommandLine([Command | Arguments]),
        if membchk(Command, getKnownCommands()) then
            doCommand(Command, Arguments),
            if not membchk(Command, getNoHistoryCommands()) then
                push_last_command(Command, Arguments)    
            end
        else 
            unknownCommand(Command)
        end
    end.
obeyCommands() => obeyCommands().

%% doCommand(Command) is det

doCommand(Command) => doCommand(Command, _).


%% doCommand(Command, Args) is det
%
% @param Command:atom  is an atom representing a command;
% @param Args:list     is a (possibly empty) list of arguments
%
% @desc Causes the execution of the command Command
%   with arguments Args.

% Do nothing.
doCommand(nop, _) => true.

% Quit the system.
doCommand(quit, _) =>
    println("Bye!"),
    halt.

% Show warranty informations.
doCommand(warranty, _) =>
    println("
THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
    ").

% Show copying informations.
doCommand(copying, _) =>
    println("
Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the 'Software'), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:
    ").

% Show informations about the system.
doCommand(info, _) =>
    println("Current log level: " ++ get_log_mode().to_string),
    println("       Quiet mode: " ++ get_global(quiet_mode).to_string),
    println("         Log file: " ++ get_log_file().to_string),
    true.

% Show the help message.
doCommand(help, Args) =>
    if Args.len() == 0 then
        println("Setlog provides you with the following commands:"), nl,
        println("help"),
        println("help <what>"),
        println("    Show help for <what>."),
        println("    The argument describes the topic to give help for."),
        println("    <what> can be one of [solve]"), nl,
        println("info"),
        println("    Display the current interpreter status."), nl,
        println("up history"),
        println("    Print the whole commands history."),
        println("up <n>"), 
        println("    Redo the last <n> command issued."),
        println("    If <n> is empty the last command is issued,"),
        println("    this is equivalent to `up 0`."), nl,
        println("log <mode>"), 
        println("    Set the log mode to <mode>."), 
        println("    Available log mode: " ++ get_log_modes().to_string ++ "."),
        println("log file <file>"),
        println("    Set log file to <file>."),
        println("    Default is `stdout`."), nl,
        println("solve"),
        println("solve <formula>"),
        println("solve file <file>"),
        println("    Solve the formula, respectively, typed in stdin,"),
        println("    given as argument of this command, or read from the"),
        println("    first line of file <file> using the setlog solver."), nl,
        println("quiet <mode>"),
        println("    Set the quit mode execution."),
        println("    Available mode: [true, false]. Default is true."), nl
    elseif Args.first() == solve then
        println("NAME"),
        println("    solve - solve formula"), nl,
        println("SYNOPSIS"),
        println("    solve"),
        println("    solve <formula>"),
        println("    solve file <file>"), nl,
        println("DESCRIPTION"),
        println("    Solve a given formula with the setlog solver.")
    else
        println("Specific help for this command is not available.")
    end.

% Manage log level. 
doCommand(log, [Mode]) =>
    %parse_term(Args.first().to_string(), Term, _Vars),
    if (membchk(Mode, get_log_modes())) then
        log_mode(Mode)
    else
        wrongArgValues(log, mode, get_log_modes())
    end.
doCommand(log, [file, File]) =>
    set_log_file(File).
doCommand(log, [file | _]) => 
    wrongArgNumber(log, 2).
doCommand(log, _) => 
    wrongArgNumber(log, 1).

% Run the last issued executed command.
doCommand(up, []) => 
    [Command | Args] = get_last_command(), 
    doCommand(Command, Args).
doCommand(up, [history]) =>
    I = global(last_command_idx) - 1,
    while (I >= 0)
        print(I), print(": "), println(get_last_command(I)),
        I := I - 1
    end.
doCommand(up, _Arguments@[N|_]) => 
    [Command | Args] = get_last_command(N.to_string().to_int()),
    doCommand(Command, Args).

doCommand(solve, [file, F]) => 
    % Please note that this command solves only the 
    % first formula in a file. 
    FD = open(F),
    S = read_line(FD),
    %while(S != end_of_file)
        print("{log} => "), print(S), nl,
        doSolve(S),
    %    S := end_of_file %S := read_line(FD)
    %end,
    close(FD).

doCommand(solve, Args@[_|_]) =>
    S = "",
    foreach (Atom in Args)
        S := S ++ Atom.to_string
    end,
    println("{log} => " ++ S.to_string),
    doSolve(S).

doCommand(solve, _) =>
    print("{log} => "), S = read_line(), nl,
    doSolve(S).

% Set quiet mode.
doCommand(quiet, Args) =>
    if Args.len() != 1 then wrongArgNumber(quiet, 1), fail end,
    parse_term(Args.first().to_string(), Term, _Vars),
    if (membchk(Term, [true, false])) then
        set_quiet(Term)
    else
        wrongArgValues(solve, mode, [true, false])
    end.


%% doSolve(+FormulaString) is det
%
% @desc Issue the solver with the given formula and allow to show
%  all solutions.

doSolve(FormulaString) ?=>
    parse_term(FormulaString, Term, Vars),
    solve(Term, Res),
    println("Vars: " ++ Vars.to_string),
    println("Constraints: " ++ Res.to_string),
    nl,
    A = confirm("Another solution?"),
    if A == 1 then fail end.
doSolve(_) => println("no!").

%% readCommandLine() = CommandArgs is det
%
% @return CommandArgs:list  A list of atoms
%
% @desc Reads a command line (up to the end-of-line character) from the
%  controlling terminal, instantiating L with the list of words
%  (strings of non-blank characters) that have been read.
%
% @example 
%   For example, if the user enters
%     load test/mergesort
%   then, on exit,
%     L = ['load', 'test/mergesort']

readCommandLine(CommandArgs) ?=>
    print("log> "),
    Line := read_line(),
    Line := lstrip(Line),
    Line := rstrip(Line),
    Words = split(Line),
    CommandArgs = [Word.to_atom() : Word in Words].
readCommandLine(CommandArgs) ?=> CommandArgs = [nop].


%% push_last_command(Command, Args) is det
% 
% @desc Push the command Command with its args Args in the commands history.
%  The commands history follows an index ordering, starting by zero. Thus, the first pushed
%  command has the index 0, and the the counter is incremented.

push_last_command(Command, Args) =>
    I = global(last_command_idx),  CM = global(last_commands),  AM = global(last_args),
    CM.put(I, Command), AM.put(I, Args), I := I + 1,
    global(last_command_idx, I), global(last_commands, CM), global(last_args, AM).


%% get_last_command(N) = CommandArgs:list is det
%
% @desc Retrieve the last N-th - 1 command executed.
% @return A list which head is the last command executed, and the rest its args.

get_last_command()  = CommandArgs => CommandArgs = get_last_command(0).

get_last_command(N) = CommandArgs, N >= 0 =>
    I = global(last_command_idx), CM = global(last_commands), AM = global(last_args),
    I := I - N - 1,
    if CM.has_key(I), AM.has_key(I) then
        CommandArgs = [CM.get(I) | AM.get(I)]
    else
        CommandArgs = [nop | []]
    end.


%% unknownCommand(Command) is det
%
% @param Command:atom The issued command.

unknownCommand(Command) =>
    println("Unknown command '" ++ Command.to_string ++ "': type 'help' for advice or 'quit' to exit").


%% wrongArgNumber(Command, N) is det
%
% @param Command:atom The issued command.
% @param N:int The required number of args.
%
% @desc Display an error message concerning number of args for command Command.

wrongArgNumber(Command, N) =>
    println("Wrong argument number for command '" ++ Command.to_string ++ "'."), 
    if N > 1 then T = "args" else T = "arg" end,
    println("This command requires " ++ N.to_string ++ " " ++ T.to_string ++ ".").


%% wrongArgValues(Command, Arg, Choices) is det
%
% @param Command:atom The issued command.
% @param Arg:atom The arg with wrong values.
% @param Choices:list A (possibly empty) list of choices for parameters.
%
% @desc Display an error message concerning wrong values for arg Arg in command Command, and 
%       shows choices Choices if not empty.

wrongArgValues(Command, Arg, Choices) =>
    println("Wrong argument value for command '" ++ Command.to_string ++ "' with arg '" ++ Arg.to_string ++ "'."), 
    if Choices.len() > 0 then   println("Choose one of: " ++ Choices.to_string ++ ".")   end.


%% getKnownCommands() = List
%
% @return All known command by CLI.
getKnownCommands = List => 
    List = [copying,
            warranty,
            help,
            quit,
            info,
            solve, 
            up, 
            log,
            quiet,
            nop].


%% getNoHistoryCommands() = List
%
% @return All commands that should not be pushed in the history.
getNoHistoryCommands = List =>
    List = [up, nop].