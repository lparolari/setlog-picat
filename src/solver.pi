%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%
%%                             The {log} solver
%%
%%
%%                               developed by
%%                    Luca Parolari        Gianfranco Rossi
%%
%%                                 May 2019
%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% module solver
%
% @author Luca Parolari <luca.parolari23@gmail.com>

module solver.

import util.
import prompt.
import log_h.
import lset.
import global.


%% top_level(Term, Vars) is nondet
%
% @param Term:term  A formula to solve.
% @param TODO : redo this
%
% @desc Start the main solver and find all the solutions.

top_level(Term, Map) ?=>
    log_d_v("setlog"),
    log_d_vv("setlog :: Term="++Term.to_string),
    log_d_vv("setlog :: Map="++Map.to_string),
    global(var_names_map, Vars),
    solve(Term, Res),
    println("Vars: " ++ Map.get(vars_map).to_string),
    println("Constraints: " ++ Res.to_human(Vars).to_string),
    if anothersol() == 1 then   fail   end.

top_level(_, _) =>
    println("no!").

%% solve(+Formula, -Constraints) is det
%
% @param Formula:list  A list of goals to solve in conjunction.
% @param Constraints:list  A list of solved contraints.
%
% @desc Solves the given formula Formula creating a list of constraints
%       Constraints until a fixed point is reached.

solve(Formula, Constraints) =>
    log_d_v("solve/2"),
    NewConstraints := [],
    log_d_vvv("solve/2 :: Formula="++Formula.to_string),
    foreach (Term in Formula)
        log_d_vvv("solve/2 :: foreach : Term before="++Term.to_string),
        sat(Term, Res),
        log_d_vvv("solve/2 :: foreach : Res="++Res.to_string),
        NewConstraints := NewConstraints ++ Res,
        log_d_vvv("solve/2 :: foreach : NewConstraints="++NewConstraints.to_string)
    end,
    log_d_vvv("solve/2 :: Formula="++Formula.to_string),
    log_d_vvv("solve/2 :: NewConstraints="++NewConstraints.to_string),
    println("  " ++ Formula.to_string ++ "  ==>  " ++ NewConstraints.to_string),
    if NewConstraints !== Formula then
        log_d_vvv("solve/2 :: FOld not equal FNew"),
        solve(NewConstraints, Constraints)
    else
        log_d_vvv("solve/2 :: FOld equal FNew"),
        Constraints = NewConstraints
    end.


%% sat(F1, FR) is det

sat(F1, FR), F1 == [] => 
    log_d_vv("sat/2 :: empty"),
    FR = [].
sat(F1, FnewR) =>
    log_d_vv("sat/2 :: formula"),
    log_d_vvv("sat/2 :: F1="++F1.to_string++", FnewR="++FnewR.to_string),
    rule(F1,FnewR).

rule(eq(T1,T2), R) => eq(T1, T2, R).
rule(neq(T1, T2), R) => neq(T1, T2, R).
rule(or(T1, T2), R) => or(T1, T2, R).
rule(or(T), R) => or(T, R).
rule(insl(X, S), R) => insl(X, S, R).
rule(nin(X, S), R) => nin(X, S, R).
rule(contains(S, X), R) => contains(S, X, R).
rule(union(S1, S2, S3), R) => union(S1, S2, S3, R).
rule(disj(S1, S2), R) => disj(S1, S2, R).
rule(subset(S1, S2), R) => subset(S1, S2, R).
% FIXME : add "not found" constraint with custom error message.



% ****** equality constraints

eq(T1, T2, R),  T1 == T2 =>                                        % 1
    log_d_v("eq :: eq_1"),
    R = [].

eq(T1, T2, R), nonvar(T1), var(T2) =>                              % 2
    log_d_v("eq :: eq_2"),
    eq(T2, T1, R).

eq(T1, T2, R), 
        var(T1), T2.is_lset(),
	    not occur_check(T1, T2.lset_head()),
        T1 == T2.lset_rest() =>                                    % 3
    log_d_v("eq :: eq_3"),
    YSetNew = new_lset(T2.lset_head(),_N),
    eq(T1, YSetNew, R).

eq(T1, T2, _R), 
        var(T1),
        occur_check(T1, T2) =>                                     % 4
    log_d_v("eq :: eq_4"),
    fail.  % sic.

eq(T1, T2, R), 
        var(T1) =>                                                 % 5
    log_d_v("eq :: eq_5"),
    R = [], T1 = T2.

eq(T1, T2, _R), 
        struct(T1), struct(T2), 
        T1.name() !== T2.name() =>                                 % 6
    log_d_v("eq :: eq_6"),
    fail.  % sic.

eq(T1@[X|Xs], T2, R), 
        T1.is_lset(), T2.is_lset(),
        T1.lset_rest() == T2.lset_rest() ?=>                       % 7a
    log_d_v("eq :: eq_7a"),

    YH = T2.lset_head(),                   % head of T2.
    foreachnd_slice(YH, YElem, YSlice),    % get the j-th element nondet.
    YRest = T2.lset_rest(),                % rest of T2.
    YSetSliced = new_lset(YSlice, YRest),  % build T2 without j-th elem.

    R1 = [ $eq(X, YElem) ],
    R2 = [ $eq(Xs, YSetSliced) ],

    R = R1 ++ R2.

eq(T1@[X|_], T2, R), 
        T1.is_lset(), T2.is_lset(),
        T1.lset_rest() == T2.lset_rest() ?=>                       % 7b
    log_d_v("eq :: eq_7b"),

    YH = T2.lset_head(),                   % head of T2.
    foreachnd_slice(YH, YElem, YSlice),    % get the j-th element nondet.
    YRest = T2.lset_rest(),                % rest of T2.
    YSetSliced = new_lset(YSlice, YRest),  % build T2 without j-th elem.

    R1 = [ $eq(X, YElem) ],
    R2 = [ $eq(T1, YSetSliced) ],

    R = R1 ++ R2.

eq(T1@[X|Xs], T2, R),
        T1.is_lset(), T2.is_lset(),
        T1.lset_rest() == T2.lset_rest() ?=>                       % 7c
    log_d_v("eq :: eq_7c"),

    % no slice for T2, only Y elem.
    YH = lset_head(T2),              % head of T2.
    foreachnd_slice(YH, YElem, _),   % get the j-th element nondet.

    R1 = [ $eq(X, YElem) ],
    R2 = [ $eq(Xs, T2) ],

    R = R1 ++ R2.

eq(T1@[X|Xs], T2, R),
        T1.is_lset(), T2.is_lset(),
        T1.lset_rest() == T2.lset_rest() =>                        % 7d
    log_d_v("eq :: eq_7d"),

    XRest = lset_rest(T1),

    XHeadSlice = lset_head(Xs),
    XSetNew = new_lset(XHeadSlice, N),

    YHead = T2.lset_head(),
    YSetNew = new_lset(YHead, N),

    R1 = [ $eq(XRest, [X|N]) ],
    R2 = [ $eq(XSetNew, YSetNew) ],

    R = R1 ++ R2.

eq(T1@[X|Xs], T2@[Y|Ys], R),
        T1.is_lset(), T2.is_lset() ?=>                             % 8a
    log_d_v("eq :: eq_8a"),
    R = [ $eq(X,Y), $eq(Xs, Ys) ].

eq(T1@[X|_], T2@[Y|Ys], R),
        T1.is_lset(), T2.is_lset() ?=>                             % 8b
    log_d_v("eq :: eq_8b"),
    R = [ $eq(X,Y), $eq(T1, Ys) ].

eq(T1@[X|Xs], T2@[Y|_], R),
        T1.is_lset(), T2.is_lset() ?=>                             % 8c
    log_d_v("eq :: eq_8c"),
    R = [ $eq(X,Y), $eq(Xs, T2) ].

eq(T1@[X|Xs], T2@[Y|Ys], R),
        T1.is_lset(), T2.is_lset() =>                              % 8d
    log_d_v("eq :: eq_8d"),
    R = [  
        $eq( Xs,  [Y|N] ),  
        $eq( [X|N],  Ys ) 
    ].

eq(T1, T2, R),
        T1.struct(), T2.struct(),
        T1.name() == T2.name(),
        T1.arity() == T2.arity() =>                                % 9
    log_d_v("eq :: eq_9"),
    RR = [],
    foreach(I in 1..T1.arity())
        RR := RR ++ [  $eq( T1[I], T2[I] )  ]
    end,
    R = RR.



% ****** inequality constraints

neq(T1, T2, _R), T1 == T2 =>                                       % 1
    log_d_vv("neq :: neq_1"),
    fail.  %sic.

neq(T1, T2, R), nonvar(T1), var(T2) =>                             % 2
    log_d_vv("neq :: neq_2"),
    R = [$neq(T2, T1)].

neq(T1, T2, R),
        T2.is_lset(),
        not occur_check(T1, T2.lset_head()),
        T1 == T2.lset_rest() =>                                    % 3
    log_d_vv("neq :: neq_3"),
    RR = [],
    foreach(YElem in T2.lset_head())
        RR := RR ++ [$nin(YElem, T1)] 
    end,
    R = [$or(RR)]. % FIXME what about the notin operator??

neq(T1, T2, R), occur_check(T1, T2) =>                             % 4 
    log_d_vv("neq :: neq_4"),
    R = [].  % sic.

neq(T1@[X|Xs], T2@[Y|Ys], R) ?=>                                   % 5a
    log_d_vv("neq :: neq_5a"),
    R = [$contains(T1, N), $nin(N, T2)].

neq(T1@[X|Xs], T2@[Y|Ys], R) ?=>                                   % 5b
    log_d_vv("neq :: neq_5b"),
    R = [$nin(N, T1), $contains(T2, N)].

neq(T1, T2, R), 
        struct(T1), struct(T2), 
        name(T1) !== name(T2) =>                                   % 6a
    log_d_vv("neq :: neq_6a"),
    R = [].  % sic.

neq(T1, T2, R), 
        struct(T1), struct(T2),
        arity(T1) !== arity(T2) =>                                 % 6b
    log_d_vv("neq :: neq_6b"),
    R = [].  % sic.

neq(T1, T2, R), 
        struct(T1), struct(T2) =>                                  % 7
    log_d_vv("neq :: neq_7"),
    RR = [],
    foreach (I in 1..T1.arity())
        X1 = T1[I], X2 = T2[I],
        RR := RR ++ [$neq(X1, X2)]
    end,
    R = [$or(RR)].

neq(T1, T2, R) => % temp / DEFAULT??? FIXME
    log_d_vv("neq :: neq_temp"),
    R = [$neq(T1, T2)].



% ****** membership constraints

% an alias for contains(T2, T1).
insl(T1, T2, R) => contains(T2, T1, R).

contains([], _, R) =>                                              % 1
    log_d_vv("contains :: in_1"),  
    false.  % sic.

contains(T2@[X|Xs], T1, R) =>                                      % 2
    log_d_vv("contains :: in_2"),
    R = [ $or(  $eq(T1,X), $contains(Xs,T1)  ) ].

contains(T2, T1, R), var(T2) =>                                    % 3
    log_d_vv("contains :: in_3"), 
    R = [ $eq(T2, [T1|_N]) ].



% ****** union constraints

union(S1, S2, S3, R), 
        S1.is_lset(), S2.is_lset(), S3.is_lset(),
        S1 == S2 =>                                                % 1
    log_d_v("union :: un_1"),
    R = [$eq(S1, S3)].

union(S1, S2, S3, R),
        S1.is_lset(), S2.is_lset(),
        S3.is_emptyset() =>                                        % 2
    log_d_v("union :: un_2"),
    R = [$eq(S1, S3), $eq(S2, S3)].

union(S1, S2, V, R),
        S1.is_emptyset(),
        S2.is_lset() =>                                            % 3
    log_d_v("union :: un_3"),
    R = [$eq(V, S2)].

union(S1, S2, V, R),
        S2.is_emptyset(),
        S1.is_lset() =>                                            % 4
    log_d_v("union :: un_4"),
    R = [$eq(V, S1)].

union(S1@[X|Xs], S2, V, R),
        S1.is_lset(),
        S2.is_lset() =>                                            % 5
    log_d_v("union :: un_5"),
    R1 = [ $or(
                [ $nin(X, S2), $union(N1, S2, N) ],
                [ $eq(S2,[X|N2]), $union(N1, N2, N) ]
            )],
    R2 = [ 
            $eq(S1, [X|N1]), 
            $eq(V, [X|N])  
        ],
    R = R1 ++ R2.

union(S2, S1@[X|Xs], V, R),
        S1.is_lset(),
        S2.is_lset() =>                                            % 6
    log_d_v("union :: un_6"),
    % this rule is intentionally identical to un_5, with head names swapped.
    R1 = [ $or(
                [ $nin(X, S2), $union(N1, S2, N) ],
                [ $eq(S2,[X|N2]), $union(N1, N2, N) ]
            )],
    R2 = [ 
            $eq(S1, [X|N1]), 
            $eq(V, [X|N])  
        ],
    R = R1 ++ R2.

union(S1, S2, S3@[Z|Zs], R),
        S1.is_lset(),
        S2.is_lset(),
        S3.is_lset() =>                                            % 7
    log_d_v("union :: un_7"),
    R1 = [ $eq(S1,[Z|N1]), $union(N1,B2,N) ],
    R2 = [ $eq(S2,[Z|N1]), $union(S1,N1,N) ],
    R3 = [ $eq(S1,[Z|N1]), $eq(S2,[Z|N2]), $union(N1,N2,N) ],
    R4 = [ $eq(S3,[Z|N])],
    
    R = [ $or([R1,R2,R3]), R4].


% ****** disjointness constraints.

disj(A, B, R),
        A.is_lset(), B.is_lset(),
        A.is_emptyset() =>                                         % 1
    log_d_v("disjointness :: disj_1"),
    R = [].

disj(A, B, R),
        A.is_lset(), B.is_lset(),
        B.is_emptyset() =>                                         % 2
    log_d_v("disjointness :: disj_2"),
    R = [].

disj(A, A, R),
        A.is_lset() =>                                             % 3
    log_d_v("disjointness :: disj_3"),
    Empty = new_lset(),
    R = [ $eq(A, Empty) ].

disj(S1@[B|Bs], A, R),
        S1.is_lset() =>                                            % 4
    log_d_v("disjointness :: disj_4"),
    R = [ $nin(B, A), $disj(A, Bs) ].

disj(A, S2@[B|Bs], R),
        S2.is_lset() =>                                            % 5
    log_d_v("disjointness :: disj_5"),
    R = [ $nin(B, A), $disj(A, Bs) ].

disj(S1@[A|As], S2@[B|Bs], R),
        S1.is_lset(), S2.is_lset() =>                              % 6
    log_d_v("disjointness :: disj_6"),
    R = [ $neq(A, B), $nin(A, Bs), $nin(B, As), $disj(As, Bs) ].

disj(A, B, R),
        var(A), var(B),
        A !== B =>                                                 % irreducible
    log_d_v("disjointness :: disj_irreducible"),
    R = [ $disj(A, B) ].


% ****** subset rules.

subset(A, A, R),
        A.is_lset() =>                                             % 1
    log_d_v("subset :: ss_1"),
    R = [].

subset(B, A, R),
        A.is_lset(), B.is_lset(),
        B.is_emptyset() =>                                         % 2
    log_d_v("subset :: ss_2"),
    R = [].

subset(A, B, R),
        A.is_lset(), B.is_lset(),
        B.is_emptyset() =>                                         % 3
    log_d_v("subset :: ss_3"),
    Empty = new_lset(),
    R = [ $eq(A, Empty) ].

subset(S1@[A|As], B, R),
        S1.is_lset(), B.is_lset(),
        B.is_emptyset() =>                                         % 4
    log_d_v("subset :: ss_4"),
    fail. % sic.

subset(S1@[A|As], B, R),
        S1.is_lset(), B.is_lset() =>                               % 5
    log_d_v("subset :: ss_5"),
    T = new_lset(A, N),
    R = [
        $eq(B, T),
        $subset(As, T)
    ].

subset(S1@[A|As], S2@[B|Bs], R),
        S1.is_lset(), S2.is_lset() =>                              % 6
    log_d_v("subset :: ss_6"),
    R1 = [ $eq(A, B), $subset(As, S2) ],
    R2 = [ $neq(A, B), $contains(Bs, A), $subset(As, S2) ],
    R = [ $or(R1, R2) ].

subset(A, B, R),
        var(A), var(B),
        A !== B =>                                                 % irreducible 1
    log_d_v("subset :: irr_1"),
    R = [ $subset(A,B) ].

subset(A, S2@[B|Bs], R)
        =>                                                         % irreducible 2
    log_d_v("subset :: irr_2"),
    R = [ $subset(A,S2) ].


% ****** not membership.

nin(X, S, R),
        S.is_lset(),
        S.is_emptyset() =>                                         % 1
    log_d_v("nin :: nin_1"),
    R = [].  % sic.

nin(X, S@[Y|Ys], R),
        S.is_lset() =>                                             % 2
    log_d_v("nin :: nin_2"),
    R = [ $neq(X,Y), $nin(X,Ys) ].

nin(X, S, R),
        occur_check(S, X) =>                                       % 3
    log_d_v("nin :: nin_3"),
    R = [].  % sic.

nin(X, S, R) =>                                                    % def
    log_d_v("nin :: nin_def"),
    R = [ $nin(X,S) ].

% ****** goal disjunction

%% or(T1, T2, -R) is nondet
%
% @param T1:term  The fisrt term to satisfy.
% @param T2:term  The second term to satisfy.
% @param R:list  A (possibly empty) list of results.
%
% @ desc Try satisfying a binary disjunction goal.

or(T1, _T2, R) ?=> 
    log_d_vv("or :: first"), 
    sat(T1, R).
or(_T1, T2, R) ?=> 
    log_d_vv("or :: second"),
    sat(T2, R).


%% or(L, -R) is nondet
%
% @param L:list  A (possibly empty) list of goals.
% @param R:list  A (possibly empty) list of results.
%
% @desc Try satisfying a N-th disjunction goal.

or([], []) ?=>
    % nothing to do.
    log_d_vv("or/2 :: first").
or([T|_Tr], R) ?=>
    % try satifying the first element of the list.
    log_d_vv("or/2 :: second"),
    sat(T, R).
or([_T|Tr], R) ?=>
    % try satisfyng the rest of the list.
    log_d_vv("or/2 :: third"),
    or(Tr, R).


% *********************************************************
% aux predicates 


%% anothersol() = A
%
% @return 1 whether user wants another solution, 0 otherwise.

anothersol() = A => 
        nl,
        A = confirm("Another solution?").


%% to_human(Term, Vars) = ResHuman
%
% @param Vars:map   A map containing Name=var.
% @param Term:term  A term in Picat representation.
%
% @return A term in human representation.

to_human(Term) = ResHuman =>
    ResHuman = to_human(Term, global(var_names_map)).
to_human(Term, _) = Term.  % FIXME : temporary to_human/2 (the right one is not working).
to_human(Term, Vars) = ResHuman =>
    log_d_v("to_human/1"),
    log_d_vvv("to_human/1 :: Vars=" ++ Vars.to_string),
    ResHuman = Term,
    foreach (X in Vars)
        NameHuman = NameInternal = X,
        log_d_vvv("to_human/1 :: NameHuman=" ++ NameHuman.to_string ++ ", NameInternal=" ++ NameInternal.to_string),
        ResHuman := replace(ResHuman, NameInternal, NameHuman),
    end.


%% occur_check(+X, +Y) is det
%
% @param X  the variable to find.
% @param Y  the lookup term.
% 
% @desc The predicate is true whether the variable X is a member of vars(Y).

% FIXME : check soundess of occur_check
occur_check(X, Y) => membchk(X, vars(Y)).

% R is the boolean result used for the function is_occur_check.
occur_check(X, Y, R) ?=> occur_check(X, Y), R = 1.
occur_check(_X, _Y, R) => R = 0.
is_occur_check(X, Y) = R => occur_check(X, Y, R).


% TODO : comment me.
foreachnd_slice(List, Elem, Slice) => 
    foreachnd_slice(List, Elem, Slice, 1, List.len()).

foreachnd_slice(List, Elem, Slice, I, Ie), I <= Ie ?=>
    [Elem|_] = slice(List, I, I),
    Slice = slice(List, 1, I-1) ++ slice(List, I+1, Ie).
foreachnd_slice(List, Elem, Slice, I, Ie), I <= Ie ?=>
    foreachnd_slice(List, Elem, Slice, I + 1, Ie).
