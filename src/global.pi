%% module global
%
% Provide global variables, i.e. variables that can be accessed from the
%  whole program and keep their values until picat is powered off.
%
% @author Luca Parolari <luca.parolari23@gmail.com>
% @version 0.1.0

module global.



%% get_global(+Key) = Value
%
% @desc Get variable with name Key and return it's value in Value.
get_global(Key) = Value =>
    G = get_map(),
    Value = G.get(Key).

%% global(+Key) = Value
%
% @desc Get variable with name Key and return it's value in Value.
% @deprecated
global(Key) = Value =>
    G = get_map(),
    Value = G.get(Key).

%% global(+Key, +Value)
%
% @desc Set a variable with name Key and value Value.
set_global(Key, Value) =>
    G = get_map(),
    G.put(Key, Value).

%% global(+Key, +Value)
%
% @desc Set a variable with name Key and value Value.
% @deprecated
global(Key, Value) =>
    G = get_map(),
    G.put(Key, Value).


%% has_global(+Key) is det
%
% @desc The predicate fails whether the key Key is not in globals, suceeds otherwise.

is_global(Key) => has_key(get_map(), Key).


%% has_global(+Key) = Res
%
% @return 1 whether key Key exists in globals, 0 otherwise.

has_global(Key) = Res => has_global(Key, Res).

% helpers for transforming a predicate into a function.
has_global(Key, Res), is_global(Key) => Res = 1.
has_global(_, Res) => Res = 0.


private 
get_map() = M => M = get_global_map().